# This is a basic workflow to help you get started with Actions

name: Build and push the tagged build to production

# Controls when the action will run. 
on:
  # Triggers the workflow on the specific tag
  push:
    tags:
        - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_push_image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
            
      # see https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # see https://github.com/docker/login-action#github-container-registry
      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push BookFast.Facility
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: BookFast.Facility/Dockerfile
          tags: ${{ secrets.REGISTRY_NAME }}/bookfast/bookfast-facility:${{ env.RELEASE_VERSION }}
          push: true

      - name: Build and push BookFast.Files
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: BookFast.Files/Dockerfile
          tags: ${{ secrets.REGISTRY_NAME }}/bookfast/bookfast-files:${{ env.RELEASE_VERSION }}
          push: true

      - name: Build and push BookFast.Booking
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: BookFast.Booking/Dockerfile
          tags: ${{ secrets.REGISTRY_NAME }}/bookfast/bookfast-booking:${{ env.RELEASE_VERSION }}
          push: true

      - name: Build and push BookFast.Search.Indexer
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: BookFast.Search.Indexer/Dockerfile
          tags: ${{ secrets.REGISTRY_NAME }}/bookfast/bookfast-search-indexer:${{ env.RELEASE_VERSION }}
          push: true

      - name: Build and push BookFast.Search
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: BookFast.Search/Dockerfile
          tags: ${{ secrets.REGISTRY_NAME }}/bookfast/bookfast-search:${{ env.RELEASE_VERSION }}
          push: true

  deploy:
    runs-on: ubuntu-latest
    needs: build_push_image

    steps:
      - uses: actions/checkout@v2

      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          # Version of helm
          version: v3.6.1 # default is latest

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          
      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace bookfast-production \
            bookfast \
            ./kubernetes/bookfast \
            --set registry=${{ secrets.REGISTRY_NAME }} \
            --set env.ASPNETCORE_ENVIRONMENT=Production \
            --set env.KeyVaultName=${{ secrets.KEYVAULT_NAME_PROD }} \
            --set env.UserAssignedClientId=${{ secrets.USER_ASSIGNED_CLIENT_ID }} \
            --set acme.email=${{ secrets.ACME_EMAIL }} \
            --set dns.backend=${{ secrets.DNS_BACKEND_PROD }} \
            --set dns.files=${{ secrets.DNS_FILES_PROD }}
