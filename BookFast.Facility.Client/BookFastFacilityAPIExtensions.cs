// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BookFast.Facility.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BookFastFacilityAPI.
    /// </summary>
    public static partial class BookFastFacilityAPIExtensions
    {
            /// <summary>
            /// List accommodations by facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            public static IList<AccommodationRepresentation> ListAccommodations(this IBookFastFacilityAPI operations, int facilityId)
            {
                return operations.ListAccommodationsAsync(facilityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List accommodations by facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AccommodationRepresentation>> ListAccommodationsAsync(this IBookFastFacilityAPI operations, int facilityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAccommodationsWithHttpMessagesAsync(facilityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            public static void CreateAccommodation(this IBookFastFacilityAPI operations, int facilityId, CreateAccommodationCommand accommodationData = default(CreateAccommodationCommand))
            {
                operations.CreateAccommodationAsync(facilityId, accommodationData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityId'>
            /// Facility ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAccommodationAsync(this IBookFastFacilityAPI operations, int facilityId, CreateAccommodationCommand accommodationData = default(CreateAccommodationCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateAccommodationWithHttpMessagesAsync(facilityId, accommodationData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find accommodation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            public static AccommodationRepresentation FindAccommodation(this IBookFastFacilityAPI operations, int id)
            {
                return operations.FindAccommodationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find accommodation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccommodationRepresentation> FindAccommodationAsync(this IBookFastFacilityAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindAccommodationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            public static void UpdateAccommodation(this IBookFastFacilityAPI operations, int id, UpdateAccommodationCommand accommodationData = default(UpdateAccommodationCommand))
            {
                operations.UpdateAccommodationAsync(id, accommodationData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='accommodationData'>
            /// Accommodation details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAccommodationAsync(this IBookFastFacilityAPI operations, int id, UpdateAccommodationCommand accommodationData = default(UpdateAccommodationCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAccommodationWithHttpMessagesAsync(id, accommodationData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            public static void DeleteAccommodation(this IBookFastFacilityAPI operations, int id)
            {
                operations.DeleteAccommodationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete accommodation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAccommodationAsync(this IBookFastFacilityAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAccommodationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List facilities by owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FacilityRepresentation> ListFacilities(this IBookFastFacilityAPI operations)
            {
                return operations.ListFacilitiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List facilities by owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FacilityRepresentation>> ListFacilitiesAsync(this IBookFastFacilityAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFacilitiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            public static void CreateFacility(this IBookFastFacilityAPI operations, CreateFacilityCommand facilityData = default(CreateFacilityCommand))
            {
                operations.CreateFacilityAsync(facilityData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateFacilityAsync(this IBookFastFacilityAPI operations, CreateFacilityCommand facilityData = default(CreateFacilityCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateFacilityWithHttpMessagesAsync(facilityData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find facility by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            public static FacilityRepresentation FindFacility(this IBookFastFacilityAPI operations, int id)
            {
                return operations.FindFacilityAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find facility by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FacilityRepresentation> FindFacilityAsync(this IBookFastFacilityAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindFacilityWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            public static void UpdateFacility(this IBookFastFacilityAPI operations, int id, UpdateFacilityCommand facilityData = default(UpdateFacilityCommand))
            {
                operations.UpdateFacilityAsync(id, facilityData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='facilityData'>
            /// Facility details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateFacilityAsync(this IBookFastFacilityAPI operations, int id, UpdateFacilityCommand facilityData = default(UpdateFacilityCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateFacilityWithHttpMessagesAsync(id, facilityData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            public static void DeleteFacility(this IBookFastFacilityAPI operations, int id)
            {
                operations.DeleteFacilityAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete facility
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFacilityAsync(this IBookFastFacilityAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteFacilityWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
