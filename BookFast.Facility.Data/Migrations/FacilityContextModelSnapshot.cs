// <auto-generated />
using System;
using BookFast.Facility.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookFast.Facility.Data.Migrations
{
    [DbContext(typeof(FacilityContext))]
    partial class FacilityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:facility.accommodationseq", "'accommodationseq', 'facility', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:facility.facilityseq", "'facilityseq', 'facility', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookFast.Facility.Data.Models.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "accommodationseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "facility")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description");

                    b.Property<int>("FacilityId");

                    b.Property<string>("Images");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(320);

                    b.Property<int>("RoomCount");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Accommodations","facility");
                });

            modelBuilder.Entity("BookFast.Facility.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "facilityseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "facility")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description");

                    b.Property<string>("Images");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(320);

                    b.Property<string>("Owner")
                        .IsRequired();

                    b.Property<string>("StreetAddress");

                    b.HasKey("Id");

                    b.ToTable("Facilities","facility");
                });

            modelBuilder.Entity("BookFast.ReliableEvents.ReliableEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("OccurredAt");

                    b.Property<string>("Payload")
                        .IsRequired();

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Events","facility");
                });

            modelBuilder.Entity("BookFast.Facility.Data.Models.Accommodation", b =>
                {
                    b.HasOne("BookFast.Facility.Data.Models.Facility", "Facility")
                        .WithMany("Accommodations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
