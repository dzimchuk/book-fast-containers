// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BookFast.Files.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BookFastFilesAPI.
    /// </summary>
    public static partial class BookFastFilesAPIExtensions
    {
            /// <summary>
            /// Get a write access token for a new facility image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='originalFileName'>
            /// Image file name
            /// </param>
            public static FileAccessTokenRepresentation GetFacilityImageUploadToken(this IBookFastFilesAPI operations, int id, string originalFileName = default(string))
            {
                return operations.GetFacilityImageUploadTokenAsync(id, originalFileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a write access token for a new facility image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Facility ID
            /// </param>
            /// <param name='originalFileName'>
            /// Image file name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileAccessTokenRepresentation> GetFacilityImageUploadTokenAsync(this IBookFastFilesAPI operations, int id, string originalFileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFacilityImageUploadTokenWithHttpMessagesAsync(id, originalFileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a write access token for a new accommodation image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='originalFileName'>
            /// Image file name
            /// </param>
            public static FileAccessTokenRepresentation GetAccommodationImageUploadToken(this IBookFastFilesAPI operations, int id, string originalFileName = default(string))
            {
                return operations.GetAccommodationImageUploadTokenAsync(id, originalFileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a write access token for a new accommodation image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Accommodation ID
            /// </param>
            /// <param name='originalFileName'>
            /// Image file name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileAccessTokenRepresentation> GetAccommodationImageUploadTokenAsync(this IBookFastFilesAPI operations, int id, string originalFileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccommodationImageUploadTokenWithHttpMessagesAsync(id, originalFileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
